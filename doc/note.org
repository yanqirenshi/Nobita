* 01/13 13:02 全体を思い出す


こんな感じ？
       	       	       	+------+
	       	        | beat | 空気の振動/時間の流れ
		        +------+   |
       	       	       	   |   	   |-> bpm
       	       	       	   |   	   `-> life
 		     	  tick
       	       	     	   |
       	     表現する。    |	   感じる。
		|	   V	     |
 +------+       V        +-----+     V 	     +------+
 | omae | -- express --> | air | -- feel --> | omae |
 +------+                +-----+       	     +------+
			   |
	       	       	   |-> from
			   |-> to
			   |-> port
			   |-> status
			   |-> contents
			   `-> timestamp

 |<--------------- situation ---------------------->|
		      - make
		      - get
		      - find

これ、良く考えたら、 開始がないね。

関係の無いやつはどうすんるんじゃろう。

from ----> to	  みたいなやつ。
(null)	   (omae)

まぁ tick の実装しだいなんじゃろうけど。
つか、situation-make で from 無しは 存在しないね。


この仕組みは普通のジョブスケジューラーとは異なる。

仕事の連鎖、ジョブのコミュニケーション。
これはプログラミング言語といって良いんじゃないかな。

なんか難しくなってきたねぇ。。。。

とりあえず 時間が来たら毎回実行してくれるようなんが欲しいんじゃけど。



10:00 ---> | nobita |

      +------------+      +------+
+---> | omae-timer | ---> | omae | ---+
|     +------------+      +------+    |
|       10:00                         |
|                                     |
+-------------------------------------+

  10:00 に実行される。
  次の処理を実行させる。
  10:00 の処理を実行させる。
  10:00 からの処理は 次の10:00 になったら実行される。
  ループじゃね。これは。

  そう考えると、やっぱりビートを刻むんは omae の方じゃね。

  omae が 自分で自分が仕事をするタイミングであることを判断できる必要がある。

  先行条件が全部完了している時
  自身が実行する条件を満すとき

  完了したら完了に変る。
* omae
readinessp ： 準備完了関数を実装する。 
 +------+
 | omae |
 +------+
     ^
     |
     +----------------+-------------+
     |                |             |
+------------+  +-----------+  +---------+
| omae-timer |  | omae-wait |  | omae-cl |
+------------+  +-----------+  +---------+

* beat 
beat は サイクル毎に 実行すべき omae を探す。

探して 実行する。
